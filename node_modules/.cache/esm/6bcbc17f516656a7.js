let Product,Types;_516‍.x([["create",()=>create],["list",()=>list],["remove",()=>remove],["update",()=>update]]);_516‍.w("../../models/product",[["default",["Product"],function(v){Product=v}]]);_516‍.w("mongoose",[["Types",["Types"],function(v){Types=v}]]);

const ObjectId = Types.ObjectId;

       const create = async (ctx) => {
  const { name, numOfProducts, productImage, price } = ctx.request.body;

  const product = new Product({
    name,
    numOfProducts,
    productImage,
    price,
  });

  try {
    await product.save();
  } catch (e) {
    return ctx.throw(500, e);
  }

  ctx.body = product;
};

       const list = async (ctx) => {
  const page = parseInt(ctx.query.page || "1", 10);

  if (page < 1) {
    ctx.status = 400;
    return;
  }

  try {
    const products = await Product.find()
      .sort({ _id: -1 })
      .limit(10)
      .skip((page - 1) * 10)
      .exec();

    const postCount = await Product.countDocuments().exec();
    ctx.set("Last-page", Math.ceil(postCount / 10));
    ctx.body = products;
  } catch (e) {
    return ctx.throw(500, e);
  }
};

       const remove = async (ctx) => {
  const { id } = ctx.params;

  if (!ObjectId.isValid(id)) {
    ctx.status = 400;
    return;
  }

  try {
    await Product.findByIdAndRemove(id).exec();
  } catch (e) {
    if (e.name === "CastError") {
      ctx.status = 400;
      return;
    }
  }

  ctx.status = 204;
};

       const update = async (ctx) => {
  const { id } = ctx.params;

  if (!ObjectId.isValid(id)) {
    ctx.status = 400;
    return;
  }

  let product;

  try {
    product = await Product.findByIdAndUpdate(id, ctx.request.body, {
      new: true,
    }).exec();
  } catch (e) {
    return ctx.throw(500, e);
  }

  ctx.body = product;
};
